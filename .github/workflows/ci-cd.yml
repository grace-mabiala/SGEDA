name: Django CI with MySQL

on: [push, pull_request]

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
          MYSQL_DATABASE: ${{ secrets.MYSQL_DATABASE }}
          MYSQL_USER: ${{ secrets.MYSQL_USER }}
          MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y default-libmysqlclient-dev

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install dotenv

    - name: Wait for MySQL to be ready
      run: |
        for i in {1..30}; do
          if mysqladmin ping -h 127.0.0.1 -u ${{ secrets.MYSQL_USER }} -p${{ secrets.MYSQL_PASSWORD }} --silent; then
            echo "MySQL is ready!"
            break
          fi
          echo "Waiting for MySQL... Attempt $i"
          sleep 2
        done

    - name: Create .env file
      env:
        DB_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
      run: |
        echo "DB_NAME=${{ secrets.MYSQL_DATABASE }}" > .env
        echo "DB_USER=${{ secrets.MYSQL_USER }}" >> .env
        echo "DB_PASSWORD=$DB_PASSWORD" >> .env
        echo "DB_HOST=127.0.0.1" >> .env
        echo "DB_PORT=3306" >> .env
        echo "SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY }}" >> .env
        chmod 600 .env

    - name: Show database tables (debug)
      run: |
        mysql -h 127.0.0.1 -u ${{ secrets.MYSQL_USER }} -p${{ secrets.MYSQL_PASSWORD }} ${{ secrets.MYSQL_DATABASE }} -e "SHOW TABLES;"

    - name: Reset database
      run: |
        mysql -h 127.0.0.1 -u ${{ secrets.MYSQL_USER }} -p${{ secrets.MYSQL_PASSWORD }} -e "DROP DATABASE IF EXISTS ${{ secrets.MYSQL_DATABASE }};"
        mysql -h 127.0.0.1 -u ${{ secrets.MYSQL_USER }} -p${{ secrets.MYSQL_PASSWORD }} -e "CREATE DATABASE ${{ secrets.MYSQL_DATABASE }} CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;"

    - name: Run migrations
      run: |
        python manage.py makemigrations
        python manage.py migrate

    - name: Run tests
      run: python manage.py test